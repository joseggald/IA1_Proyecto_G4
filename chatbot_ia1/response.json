{
  "0": [
    "¡Hola! Soy un chatbot especializado en programación y algoritmos basicos en python y javascript. ¿En qué puedo ayudarte?",
    "¡Hey! Me alegro de verte. ¿Tienes alguna duda sobre programación o algoritmos basicos en python y javascript?",
    "¡Saludos! Estoy aquí para ayudarte con temas de programación y algoritmos basicos en python y javascript. ¿Qué te gustaría aprender?",
    "¡Hola! ¿Qué te gustaría saber sobre programación o algoritmos basicos en python y javascript?",
    "¡Bienvenido! Soy un asistente especializado en programación y algoritmos basicos en python y javascript. ¿En qué puedo ayudarte?"
  ],
  "1": [
    "Soy un chatbot creado para enseñar programación y algoritmos basicos en python y javascript. ¿Qué necesitas saber?",
    "Puedo explicar conceptos de programación y algoritmos basicos en python y javascript. ¿Tienes algún tema en mente?",
    "Soy un asistente diseñado para ayudarte con dudas de programación y algoritmos basicos en python y javascript. ¿Te interesa algún tema en particular?",
    "Mi función principal es enseñarte programación y algoritmos basicos en python y javascript, y responder tus preguntas. ¿Cómo puedo asistirte?",
    "Estoy aquí para ayudarte a comprender conceptos de programación y algoritmos basicos en python y javascript. ¿Tienes alguna pregunta?"
  ],
  "2": [
    "¡Muy bien! ¿Cómo puedo asistirte hoy?",
    "Todo perfecto, gracias por preguntar. ¿En qué te puedo ayudar?",
    "¡Genial! Listo para resolver tus dudas. ¿Qué necesitas saber?",
    "Todo bien. Preparado para ayudarte con programación o algoritmos basicos en python y javascript. ¿Por dónde empezamos?",
    "¡Estoy excelente! ¿Te puedo ayudar con algo específico?"
  ],
  "3": [
    "La programación es el proceso de escribir instrucciones para que una computadora realice tareas específicas. \n ¿Te gustaría aprender más empezando por conceptos como algoritmos, lenguajes o algun concepto basico?",
    "Programar es dar órdenes precisas a una máquina para que resuelva problemas o ejecute acciones. \n ¿Te gustaría aprender más empezando por conceptos como variables, constantes o algun concepto que te interesante?",
    "La programación combina lógica, creatividad y conocimiento técnico para crear soluciones informáticas. \n ¿Te gustaría aprender más empezando por conceptos como algoritmos, lenguajes o algun concepto basico?",
    "Escribir código es esencialmente el lenguaje con el que le decimos a una computadora qué hacer. \n ¿Te gustaría aprender más empezando por conceptos como variables, constantes, funciones, ciclos o algun concepto que te interesante?",
    "En términos simples, programar es como enseñarle a un robot cómo realizar tareas paso a paso. \n ¿Te gustaría aprender más empezando por conceptos como algoritmos, lenguajes o algun concepto basico?"
  ],
  "4": [
    "Un algoritmo es una secuencia de pasos lógicos y definidos que resuelven un problema específico. ¿Quieres saber que algoritmos puedo enseñarte?",
    "Los algoritmos son como recetas que indican paso a paso cómo llegar a un objetivo. ¿Te gustaría aprender más sobre ellos, puedo enseñarte los que tengo disponibles?",
    "Un algoritmo organiza las instrucciones necesarias para realizar una tarea de manera eficiente. ¿Te gustaría conocer algunos algoritmos que tengo?",
    "Esencialmente, un algoritmo es un conjunto de reglas que se siguen para resolver problemas. ¿Te gustaría aprender sobre algunos algoritmos que tengo?",
    "Un algoritmo permite estructurar soluciones claras y repetibles para problemas complejos. ¿Te gustaría conocer algunos algoritmos que tengo?"
  ],
  "5": [
    "Un lenguaje de programación es una herramienta que usamos para comunicarnos con las computadoras.",
    "Los lenguajes de programación permiten crear software, aplicaciones y sistemas informáticos.",
    "En esencia, un lenguaje de programación traduce nuestras ideas en instrucciones que una computadora entiende.",
    "Imagina los lenguajes de programación como idiomas para hablarle a las máquinas.",
    "Los lenguajes de programación, son esenciales para crear programas útiles y funcionales."
  ],
  "6": [
    "Una variable es un espacio reservado en la memoria de un programa para almacenar información temporalmente. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Las variables son fundamentales para la programación, ya que permiten manipular datos en el código. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Una variable actúa como una etiqueta para guardar valores que pueden cambiar a lo largo de un programa. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Imagina una variable como una caja donde puedes guardar información, como números o texto. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Esencialmente, las variables son contenedores que ayudan a manejar datos dinámicos en programación. ¿Quieres saber más como funcionan en Python o JavaScript?"
  ],
  "7": [
    "Una constante es similar a una variable, pero su valor no puede cambiar una vez que se define. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Las constantes son útiles para representar valores que permanecen iguales a lo largo de un programa. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Piensa en una constante como un dato fijo, como el valor de Pi, que no necesita modificarse. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "En programación, las constantes nos ayudan a evitar errores al asegurar que ciertos valores no cambien. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Una constante garantiza que un valor crítico permanezca inalterado durante la ejecución de un programa. ¿Quieres saber más como funcionan en Python o JavaScript?"
  ],
  "8": [
    "Un ciclo 'for' repite un bloque de código un número específico de veces. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Los ciclos 'for' son ideales para recorrer listas, arreglos u otras colecciones de datos. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "En esencia, un ciclo 'for' automatiza tareas repetitivas al iterar sobre una secuencia. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Los bucles 'for' nos ayudan a ejecutar una serie de pasos predefinidos de manera eficiente. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Imagina un ciclo 'for' como una manera de decir: 'Repite esto hasta que termines todos los elementos'. ¿Quieres saber más como funcionan en Python o JavaScript?"
  ],
  "9": [
    "Un 'if' en programación evalúa si una condición es verdadera para decidir qué acción realizar. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Las condiciones 'if' son fundamentales para tomar decisiones en el flujo de un programa. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Piensa en un 'if' como una pregunta que el programa responde con 'sí' o 'no' para proceder. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Las estructuras 'if' permiten a los programas responder dinámicamente a diferentes situaciones. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "En términos simples, un 'if' revisa si algo es cierto y luego actúa en consecuencia. ¿Quieres saber más como funcionan en Python o JavaScript?"
  ],
  "10": [
    "Un ciclo 'while' repite un bloque de código mientras una condición siga siendo verdadera. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Los bucles 'while' permiten crear repeticiones dinámicas controladas por condiciones lógicas. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Piensa en un 'while' como una manera de decir: 'Repite esto hasta que se cumpla cierta condición'. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Los ciclos 'while' son útiles cuando no se sabe exactamente cuántas veces se repetirá una acción. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Un 'while' continúa ejecutando instrucciones hasta que la condición que lo controla sea falsa. ¿Quieres saber más como funcionan en Python o JavaScript?"
  ],
  "11": [
    "Un ciclo es una estructura que permite ejecutar repetidamente un conjunto de instrucciones. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Los ciclos automatizan tareas repetitivas, como sumar números o procesar datos. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "En programación, los ciclos son esenciales para manejar grandes volúmenes de datos de manera eficiente. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Los bucles como 'for' y 'while' son tipos comunes de ciclos usados en programación. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Piensa en los ciclos como herramientas para repetir acciones sin escribir el mismo código varias veces. ¿Quieres saber más como funcionan en Python o JavaScript?"
  ],
  "12": [
    "Una función es un bloque de código diseñado para realizar una tarea específica. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Las funciones son fundamentales para organizar y reutilizar código en programación. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Piensa en una función como una receta que puedes usar cada vez que necesites un plato específico. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Las funciones permiten dividir problemas complejos en partes más manejables. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "En esencia, una función toma entradas, realiza operaciones y devuelve resultados. ¿Quieres saber más como funcionan en Python o JavaScript?"
  ],
  "13": [
    "Una clase es un modelo que define las características y comportamientos de un tipo de objeto. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Las clases son la base de la programación orientada a objetos, permitiendo organizar datos y funciones. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Piensa en una clase como un plano para construir objetos similares pero independientes. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Las clases encapsulan datos y métodos para trabajar con esos datos de manera estructurada. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "En programación, una clase es como una plantilla para crear instancias o 'objetos'.  ¿Quieres saber más como funcionan en Python o JavaScript?"
  ],
  "14": [
    "Un objeto es una instancia de una clase, que contiene datos y funciones relacionados. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "En programación orientada a objetos, los objetos representan entidades con características y comportamientos. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Piensa en un objeto como algo tangible construido a partir de un plano (la clase). ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Un objeto combina datos (atributos) y métodos (funciones) para interactuar con el programa. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "En esencia, los objetos permiten modelar y trabajar con datos de manera más natural y lógica.  ¿Quieres saber más como funcionan en Python o JavaScript?"
  ],
  "15": [
    "El polimorfismo es un principio de la programación orientada a objetos que permite usar un método de diferentes formas. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Piensa en el polimorfismo como una manera de adaptar un comportamiento común a diferentes contextos. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "En esencia, el polimorfismo permite que métodos en diferentes clases tengan el mismo nombre pero implementaciones distintas. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "El polimorfismo facilita la reutilización de código al permitir trabajar con objetos de diferentes tipos de manera uniforme. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Es una herramienta poderosa para crear sistemas flexibles y extensibles en programación. ¿Quieres saber más como funcionan en Python o JavaScript?"
  ],
  "16": [
    "La herencia permite que una clase tome propiedades y comportamientos de otra clase.  ¿Quieres saber más como funcionan en Python o JavaScript?",
    "En programación, la herencia facilita la reutilización y extensión del código existente.  ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Piensa en la herencia como una forma de crear una nueva clase basada en una ya existente.  ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Con la herencia, las clases pueden compartir métodos y atributos sin duplicar código.  ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Esencialmente, la herencia conecta clases de manera lógica y estructurada.  ¿Quieres saber más como funcionan en Python o JavaScript?"
  ],
  "17": [
    "El encapsulamiento es un principio que protege los datos y controla el acceso a ellos en programación. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Piensa en el encapsulamiento como una manera de mantener ciertas partes de un objeto privadas. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "El encapsulamiento garantiza que los datos solo se modifiquen a través de métodos específicos. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "Es una herramienta clave para prevenir errores y mantener un código más seguro y organizado. ¿Quieres saber más como funcionan en Python o JavaScript?",
    "En esencia, el encapsulamiento es como una caja fuerte que protege la información de un objeto. ¿Quieres saber más como funcionan en Python o JavaScript?"
  ],
  "18": [
    "La abstracción es un concepto que permite enfocarse en lo esencial, ignorando los detalles innecesarios.",
    "Piensa en la abstracción como una manera de simplificar la complejidad mostrando solo lo relevante.",
    "La abstracción oculta los detalles internos y expone solo lo necesario para interactuar con un objeto.",
    "Esencialmente, la abstracción facilita trabajar con sistemas complejos al reducirlos a sus aspectos fundamentales.",
    "Es un principio clave para diseñar interfaces claras y fáciles de usar."
  ],
  "19": [
    "La programación orientada a objetos (POO) es un paradigma que organiza el código en objetos que combinan datos y funciones.",
    "POO, o programación orientada a objetos, utiliza conceptos como clases, herencia y polimorfismo para modelar problemas complejos.",
    "En POO, los objetos representan entidades del mundo real, con atributos (datos) y métodos (funciones).",
    "La programación orientada a objetos facilita la organización del código, haciéndolo más reutilizable y fácil de mantener.",
    "En términos simples, la POO es una forma de programar basada en modelos llamados objetos, que interactúan entre sí."
  ],
  "20": [
    "Existen muchos lenguajes de programación, como Python, JavaScript, Java, C++, y más.",
    "Los lenguajes de programación disponibles son variados y dependen del contexto. Algunos ejemplos son Python, JavaScript, y Java.",
    "Entre los lenguajes de programación más usados encontrarás Python, JavaScript, y C++."
  ],
  "21": [
    "Los lenguajes más populares en programación incluyen Python, JavaScript, Java, y C++.",
    "Actualmente, Python y JavaScript son considerados los lenguajes de programación más populares debido a su versatilidad.",
    "Entre los lenguajes más populares encontrarás Python, ideal para IA, y JavaScript, clave para desarrollo web."
  ],
  "22": [
    "Yo estoy diseñado para trabajar con Python y JavaScript. ¿Quieres saber más sobre ellos?",
    "Los lenguajes que entiendo son Python y JavaScript, ambos ideales para programación eficiente. ¿Quieres saber más sobre ellos?",
    "Actualmente, los lenguajes que puedo manejar son Python y JavaScript. ¿Quieres saber más sobre ellos?"
  ],
  "23": [
    "Python es un lenguaje de programación de alto nivel, conocido por su sintaxis sencilla y legibilidad. ¿Quieres empezar por instalarlo?",
    "Python es ideal para principiantes y expertos, siendo utilizado en desarrollo web, análisis de datos, inteligencia artificial y más. ¿Quieres empezar por instalarlo?",
    "En términos simples, Python es un lenguaje versátil que permite escribir programas de manera clara y eficiente. ¿Quieres empezar por instalarlo?",
    "Python es un lenguaje interpretado y multiparadigma, lo que significa que puedes usarlo para diversos tipos de proyectos. ¿Quieres empezar por instalarlo?",
    "Es un lenguaje ampliamente utilizado en la industria tecnológica debido a su facilidad de uso y poderosa comunidad. ¿Quieres empezar por instalarlo?"
  ],
  "24": [
    "### Cómo instalar Python en Windows, macOS y Linux:\n\n1. **Windows**:\n   - Descarga el instalador desde [https://www.python.org/downloads](https://www.python.org/downloads).\n   - Asegúrate de marcar la casilla **'Add Python to PATH'** durante la instalación.\n   - Ejecútalo y sigue las instrucciones.\n\n2. **macOS**:\n   - Usa Homebrew escribiendo en la terminal:\n     ```\n     brew install python\n     ```\n   - O descarga el instalador desde la página oficial y sigue las instrucciones.\n\n3. **Linux**:\n   - Abre una terminal y ejecuta:\n     ```\n     sudo apt update\n     sudo apt install python3\n     ```\n\nVerifica la instalación escribiendo:\n```bash\npython --version\n```",
    "### Instrucciones Paso a Paso para Instalar Python:\n\n#### **Windows**:\n1. Ve a [https://www.python.org/downloads](https://www.python.org/downloads) y descarga el instalador.\n2. Ejecútalo y asegúrate de marcar **'Add Python to PATH'**.\n3. Haz clic en **'Install Now'** y espera a que termine la instalación.\n4. Verifica la instalación escribiendo en el terminal:\n   ```\n   python --version\n   ```\n\n#### **macOS**:\n1. Instala Homebrew desde [https://brew.sh](https://brew.sh) si no lo tienes.\n2. En la terminal, escribe:\n   ```\n   brew install python\n   ```\n3. Alternativamente, descarga Python desde la página oficial y sigue las instrucciones del instalador.\n\n#### **Linux**:\n1. Abre una terminal.\n2. Escribe:\n   ```\n   sudo apt update\n   sudo apt install python3\n   ```\n3. Verifica la instalación escribiendo:\n   ```\n   python3 --version\n   ```\n\n¡Python está listo para usarse!",
    "### Instalar Python y Configurarlo Correctamente:\n\n#### **Windows**:\n1. Descarga el instalador desde [https://www.python.org/downloads](https://www.python.org/downloads).\n2. Durante la instalación, selecciona **'Add Python to PATH'**.\n3. Verifica la instalación ejecutando en el terminal:\n   ```\n   python --version\n   ```\n\n#### **macOS**:\n1. Instala Python con Homebrew escribiendo:\n   ```\n   brew install python\n   ```\n2. Alternativamente, descarga Python desde la página oficial.\n\n#### **Linux**:\n1. Actualiza los paquetes de tu sistema:\n   ```\n   sudo apt update\n   ```\n2. Instala Python:\n   ```\n   sudo apt install python3\n   ```\n\n### Usar `pip` para Instalar Librerías:\nDespués de instalar Python, puedes instalar librerías adicionales con `pip`. Por ejemplo:\n```bash\npip install numpy\n```"
  ],
  "25": [
    "Para ejecutar tu programa en Python, guarda el código en un archivo con extensión `.py` y usa el comando `python nombre_del_archivo.py` en tu terminal.",
    "Puedes correr tu programa en Python desde un IDE como PyCharm o VSCode, que tienen opciones integradas para ejecución.",
    "Si usas una terminal, simplemente navega hasta el directorio donde guardaste el archivo y ejecuta el comando `python3 archivo.py`."
  ],
  "26": [
    "### Primeros pasos para empezar a programar en Python:\n\n1. Instala Python en tu computadora siguiendo las instrucciones del tópico **24**.\n2. Descarga un editor de texto o IDE (como [VSCode](https://code.visualstudio.com) o PyCharm).\n3. Crea un archivo con extensión `.py`, por ejemplo: `mi_programa.py`.\n4. Escribe este código inicial:\n   ```python\n   print('¡Hola, mundo!')\n   ```\n5. Guarda el archivo.\n6. Abre una terminal, navega al directorio donde guardaste el archivo, y escribe:\n   ```\n   python mi_programa.py\n   ```\n  ¿Quieres saber mas conceptos basicos o avanzados, puedo enseñarte algoritmos, definiciones, estructura de datos?",
    "### Crear una aplicación sencilla en Python:\n\n1. Abre tu editor de texto y crea un archivo llamado `calculadora.py`.\n2. Escribe este código:\n   ```python\n   def suma(a, b):\n       return a + b\n\n   num1 = int(input('Ingresa el primer número: '))\n   num2 = int(input('Ingresa el segundo número: '))\n   resultado = suma(num1, num2)\n   print(f'El resultado de la suma es: {resultado}')\n   ```\n3. Guarda el archivo.\n4. Desde la terminal, corre el programa escribiendo:\n   ```\n   python calculadora.py\n   ```\n5. Sigue las instrucciones en la terminal para probar tu programa. \n  ¿Quieres saber mas conceptos basicos o avanzados, puedo enseñarte algoritmos, definiciones, estructura de datos?",
    "### Crear un programa interactivo:\n\n1. Abre un archivo llamado `adivinanza.py`.\n2. Escribe el siguiente código:\n   ```python\n   import random\n\n   numero_secreto = random.randint(1, 10)\n   intentos = 0\n\n   print('Adivina un número entre 1 y 10')\n\n   while True:\n       intento = int(input('Ingresa tu número: '))\n       intentos += 1\n       if intento == numero_secreto:\n           print(f'¡Felicidades! Adivinaste en {intentos} intentos.')\n           break\n       elif intento < numero_secreto:\n           print('El número es mayor. Intenta nuevamente.')\n       else:\n           print('El número es menor. Intenta nuevamente.')\n   ```\n3. Guarda el archivo y corre el programa desde tu terminal:\n   ```\n   python adivinanza.py\n   ``` \n  ¿Quieres saber mas conceptos basicos o avanzados, puedo enseñarte algoritmos, definiciones, estructura de datos?"
  ],
  "27": [
    "### Definir Variables en Python:\nLas variables en Python no necesitan declaración previa, se asignan automáticamente:\n```python\n# Asignar una variable\na = 10\nb = 'Hola'\nc = True\nprint(a, b, c)\n```",
    "Puedes cambiar el valor de una variable asignándola de nuevo:\n```python\n# Reasignación de variables\nx = 5\nx = 'Python'\nprint(x)  # Salida: Python\n```",
    "Usa nombres descriptivos para variables:\n```python\n# Nombres significativos\nedad = 25\nnombre = 'Juan'\nprint(f'{nombre} tiene {edad} años.')\n```"
  ],
  "28": [
    "### Definir Constantes en Python:\nAunque no existen constantes estrictas en Python, se usa una convención:\n```python\n# Usar nombres en mayúsculas\nPI = 3.14159\nVELOCIDAD_LUZ = 299792458\nprint(PI, VELOCIDAD_LUZ)\n```",
    "Para proteger constantes, utiliza `dataclasses`:\n```python\nfrom dataclasses import dataclass\n@dataclass(frozen=True)\nclass Constantes:\n    PI: float = 3.14159\n    E: float = 2.71828\nprint(Constantes.PI)\n```",
    "Coloca las constantes en un archivo separado para mantenerlas centralizadas:\n```python\n# constants.py\nPI = 3.14159\n\n# main.py\nfrom constants import PI\nprint(PI)\n```"
  ],
  "29": [
    "### Crear Funciones en Python:\nDefinir funciones con `def` y usar `return` para devolver resultados:\n```python\ndef sumar(a, b):\n    return a + b\n\nprint(sumar(3, 7))\n```",
    "Las funciones pueden tener valores predeterminados:\n```python\ndef saludar(nombre='Mundo'):\n    print(f'Hola, {nombre}!')\n\nsaludar()\nsaludar('Ana')\n```",
    "Usa funciones lambda para expresiones simples:\n```python\n# Función lambda\nmultiplicar = lambda x, y: x * y\nprint(multiplicar(2, 3))\n```"
  ],
  "30": [
    "### Definir Clases en Python:\nLas clases agrupan datos y comportamientos:\n```python\nclass Persona:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad\n\npersona = Persona('Ana', 30)\nprint(persona.nombre)\n```",
    "Añade métodos a las clases:\n```python\nclass Persona:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad\n\n    def saludar(self):\n        print(f'Hola, soy {self.nombre}')\n\npersona = Persona('Ana', 30)\npersona.saludar()\n```",
    "Crea clases con herencia:\n```python\nclass Animal:\n    def __init__(self, especie):\n        self.especie = especie\n\nclass Perro(Animal):\n    def __init__(self, nombre, raza):\n        super().__init__('Perro')\n        self.nombre = nombre\n        self.raza = raza\n\nmi_perro = Perro('Max', 'Labrador')\nprint(mi_perro.especie, mi_perro.nombre)\n```"
  ],
  "31": [
    "### Crear Objetos en Python:\nLos objetos son instancias de clases:\n```python\nclass Coche:\n    def __init__(self, marca, modelo):\n        self.marca = marca\n        self.modelo = modelo\n\ncoche = Coche('Toyota', 'Corolla')\nprint(coche.marca, coche.modelo)\n```",
    "Los objetos pueden tener métodos:\n```python\nclass Coche:\n    def __init__(self, marca, modelo):\n        self.marca = marca\n        self.modelo = modelo\n\n    def arrancar(self):\n        print(f'{self.marca} {self.modelo} está arrancando.')\n\nmi_coche = Coche('Ford', 'Fiesta')\nmi_coche.arrancar()\n```",
    "Los objetos se pueden combinar con otras clases:\n```python\nclass Motor:\n    def __init__(self, tipo):\n        self.tipo = tipo\n\nclass Coche:\n    def __init__(self, marca, modelo, motor):\n        self.marca = marca\n        self.modelo = modelo\n        self.motor = motor\n\nmi_motor = Motor('Eléctrico')\nmi_coche = Coche('Tesla', 'Model S', mi_motor)\nprint(mi_coche.motor.tipo)\n```"
  ],
  "32": [
    "### Ejemplo de un ciclo for en Python:\n```python\n# Recorrer una lista\nnombres = ['Ana', 'Luis', 'Pedro']\nfor nombre in nombres:\n    print(f'Hola, {nombre}!')\n\n# Recorrer un rango de números\nfor i in range(5):\n    print(f'Número: {i}')\n```",
    "Los ciclos `for` se utilizan para iterar sobre elementos de una colección. Aquí tienes un ejemplo:\n```python\n# Sumar elementos de una lista\nnumeros = [1, 2, 3, 4]\nsuma = 0\nfor num in numeros:\n    suma += num\nprint(f'La suma es: {suma}')\n```",
    "# Iterar sobre un diccionario\n  estudiantes = {'Ana': 9, 'Luis': 8, 'Pedro': 7}\n  for nombre, nota in estudiantes.items():\n    print(f'Estudiante: {nombre}, Nota: {nota}')\n\n  # Usar un ciclo for con una lista de listas\n  matriz = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ]\n  for fila in matriz:\n    for elemento in fila:\n      print(elemento, end=' ')\n    print()"
  ],
  "33": [
    "### Ejemplo de una condición if en Python:\n```python\nedad = 18\nif edad >= 18:\n    print('Eres mayor de edad')\nelse:\n    print('Eres menor de edad')\n```",
    "Las condiciones `if` permiten ejecutar código basado en una condición lógica. Ejemplo:\n```python\nnumero = 5\nif numero % 2 == 0:\n    print('Es un número par')\nelse:\n    print('Es un número impar')\n```",
    "Puedes combinar condiciones con `elif` para evaluar múltiples casos:\n```python\npuntuacion = 85\nif puntuacion >= 90:\n    print('A')\nelif puntuacion >= 80:\n    print('B')\nelif puntuacion >= 70:\n    print('C')\nelse:\n    print('Reprobado')\n```"
  ],
  "34": [
    "### Ejemplo de un bucle while en Python:\n```python\ncontador = 0\nwhile contador < 5:\n    print(f'Contador: {contador}')\n    contador += 1\n```",
    "Los bucles `while` repiten código mientras una condición sea verdadera. Ejemplo:\n```python\n# Pedir un número positivo al usuario\nnumero = -1\nwhile numero < 0:\n    numero = int(input('Introduce un número positivo: '))\nprint(f'Número válido: {numero}')\n```",
    "Usa un bucle `while` para ejecutar tareas hasta que se cumpla una condición:\n```python\n# Contar hasta 10\nn = 1\nwhile n <= 10:\n    print(n)\n    n += 1\n```"
  ],
  "35": [
    "### Ejemplo de un ciclo en Python:\n```python\n# Ciclo while\nn = 0\nwhile n < 3:\n    print(f'Iteración {n}')\n    n += 1\n\n# Ciclo for\nfor letra in 'Python':\n    print(f'Letra: {letra}')\n```",
    "Los ciclos son estructuras que permiten repetir código. Ejemplo:\n```python\n# Multiplicar números del 1 al 5\nfor i in range(1, 6):\n    print(f'5 x {i} = {5 * i}')\n```",
    "Puedes usar ciclos para recorrer listas, cadenas, diccionarios y más. Ejemplo:\n```python\n# Recorrer una lista\ncolores = ['Rojo', 'Verde', 'Azul']\nfor color in colores:\n    print(color)\n```"
  ],
  "36": [
    "### Ejemplo de polimorfismo en Python:\n```python\nclass Animal:\n    def sonido(self):\n        pass\n\nclass Perro(Animal):\n    def sonido(self):\n        return 'Ladra'\n\nclass Gato(Animal):\n    def sonido(self):\n        return 'Maulla'\n\nanimales = [Perro(), Gato()]\nfor animal in animales:\n    print(animal.sonido())\n```",
    "El polimorfismo permite utilizar un mismo método en distintas clases. Ejemplo:\n```python\nclass Forma:\n    def area(self):\n        pass\n\nclass Cuadrado(Forma):\n    def __init__(self, lado):\n        self.lado = lado\n\n    def area(self):\n        return self.lado ** 2\n\ncuadrado = Cuadrado(4)\nprint(f'Área del cuadrado: {cuadrado.area()}')\n```",
    "El polimorfismo facilita la reutilización de métodos en diferentes contextos. Ejemplo:\n```python\nclass Vehiculo:\n    def desplazamiento(self):\n        pass\n\nclass Coche(Vehiculo):\n    def desplazamiento(self):\n        return 'Se desplaza en 4 ruedas'\n\nclass Moto(Vehiculo):\n    def desplazamiento(self):\n        return 'Se desplaza en 2 ruedas'\n\nvehiculos = [Coche(), Moto()]\nfor vehiculo in vehiculos:\n    print(vehiculo.desplazamiento())\n```"
  ],
  "37": [
    "### Ejemplo de herencia en Python:\n```python\nclass Persona:\n    def __init__(self, nombre):\n        self.nombre = nombre\n\nclass Estudiante(Persona):\n    def __init__(self, nombre, carrera):\n        super().__init__(nombre)\n        self.carrera = carrera\n\nestudiante = Estudiante('Ana', 'Ingeniería')\nprint(f'{estudiante.nombre} estudia {estudiante.carrera}')\n```",
    "La herencia permite crear clases basadas en otras. Ejemplo:\n```python\nclass Vehiculo:\n    def __init__(self, marca):\n        self.marca = marca\n\nclass Coche(Vehiculo):\n    def __init__(self, marca, modelo):\n        super().__init__(marca)\n        self.modelo = modelo\n\ncoche = Coche('Toyota', 'Corolla')\nprint(f'Coche: {coche.marca} {coche.modelo}')\n```",
    "La herencia facilita la reutilización de código y la creación de clases especializadas. Ejemplo:\n```python\nclass Animal:\n    def sonido(self):\n        pass\n\nclass Perro(Animal):\n    def sonido(self):\n        return 'Ladra'\n\nclass Gato(Animal):\n    def sonido(self):\n        return 'Maulla'\n\nperro = Perro()\ngato = Gato()\nprint(perro.sonido())\nprint(gato.sonido())\n```"
  ],
  "38": [
    "### Ejemplo de encapsulamiento en Python:\n```python\nclass Cuenta:\n    def __init__(self):\n        self.__saldo = 0\n\n    def depositar(self, cantidad):\n        if cantidad > 0:\n            self.__saldo += cantidad\n\n    def obtener_saldo(self):\n        return self.__saldo\n\ncuenta = Cuenta()\ncuenta.depositar(100)\nprint(cuenta.obtener_saldo())\n```",
    "El encapsulamiento protege los datos de acceso no autorizado. Ejemplo:\n```python\nclass Usuario:\n    def __init__(self, nombre):\n        self.__nombre = nombre\n\n    def obtener_nombre(self):\n        return self.__nombre\n\nusuario = Usuario('Carlos')\nprint(usuario.obtener_nombre())\n```",
    "El encapsulamiento evita modificaciones directas a los datos. Ejemplo:\n```python\nclass Persona:\n    def __init__(self, nombre):\n        self.__nombre = nombre\n\n    def cambiar_nombre(self, nuevo_nombre):\n        self.__nombre = nuevo_nombre\n\npersona = Persona('Ana')\npersona.cambiar_nombre('Luis')\nprint(persona.__nombre)\n```"
  ],
  "39": [
    "### Lista de algoritmos que puedo enseñarte:\n- Algoritmos de búsqueda: búsqueda lineal y binaria.\n- Algoritmos de ordenamiento: burbuja, quicksort.\n- Algoritmos en estructuras de datos: árboles binarios, grafos.\n\n¿Con cuál te gustaría comenzar?",
    "Puedo enseñarte varios algoritmos. Por ejemplo:\n- Algoritmos de búsqueda (lineal, binaria).\n- Algoritmos de grafos (DFS, BFS).\n- Algoritmos de ordenamiento (burbuja, quicksort).\n\n¿Te interesa algún algoritmo específico?",
    "Mis habilidades incluyen enseñar:\n1. Algoritmos de búsqueda, como búsqueda binaria.\n2. Ordenamientos: burbuja, selección, quicksort.\n3. Algoritmos de árboles: recorrido inorden, preorden.\n\n¡Dime por dónde quieres empezar!"
  ],
  "40": [
    "Un algoritmo de búsqueda es una técnica utilizada para localizar un elemento dentro de una colección de datos. Ejemplo: búsqueda lineal en listas desordenadas o búsqueda binaria en listas ordenadas.",
    "Los algoritmos de búsqueda son esenciales en programación y se utilizan para encontrar información en estructuras de datos como listas o árboles. Ejemplos: búsqueda binaria y búsqueda en profundidad (DFS).",
    "Se usan algoritmos de búsqueda para navegar y recuperar datos de estructuras. La búsqueda binaria, por ejemplo, es eficiente al dividir repetidamente una lista ordenada en mitades para localizar un elemento."
  ],
  "41": [
    "Los algoritmos de ordenamiento organizan datos en un orden específico, como ascendente o descendente. Ejemplo: el algoritmo burbuja que compara elementos adyacentes e intercambia según sea necesario.",
    "Un algoritmo de ordenamiento es un conjunto de pasos para reorganizar elementos en una estructura de datos. Ejemplos populares incluyen quicksort, mergesort y selección.",
    "Los algoritmos de ordenamiento son cruciales para procesar datos eficientemente. Un ejemplo es el mergesort, que divide recursivamente la lista en sublistas y las combina de forma ordenada."
  ],
  "42": [
    "Los algoritmos de grafos son métodos para explorar relaciones en grafos, como rutas, conexiones y ciclos. Ejemplos: búsqueda en profundidad (DFS) y búsqueda en amplitud (BFS).",
    "Un grafo es una estructura que conecta nodos mediante aristas. Algoritmos como Dijkstra se utilizan para encontrar el camino más corto entre nodos.",
    "En programación, los algoritmos de grafos permiten modelar redes como carreteras, redes sociales o circuitos. DFS y BFS son comunes para explorar todos los nodos de un grafo."
  ],
  "43": [
    "Un algoritmo de árboles se utiliza para recorrer o modificar árboles binarios. Ejemplo: recorrido inorden, que procesa primero el subárbol izquierdo, luego la raíz y finalmente el subárbol derecho.",
    "Los árboles son estructuras jerárquicas. Los algoritmos asociados incluyen recorrido preorden, inorden y postorden, útiles en búsquedas, expresiones matemáticas y más.",
    "Los algoritmos de árboles permiten recorrer o modificar estructuras como árboles binarios o de decisión. Ejemplo: preorden (raíz, izquierda, derecha) para explorar nodos jerárquicamente."
  ],
  "44": [
    "El algoritmo burbuja organiza los elementos comparando pares adyacentes y los intercambia si están en el orden incorrecto. Es simple, pero ineficiente para listas grandes.",
    "El ordenamiento burbuja revisa repetidamente la lista, intercambiando elementos si están fuera de lugar. Es fácil de implementar, pero tiene una complejidad O(n²).",
    "En este algoritmo, cada iteración 'burbujea' el elemento más grande hacia su posición correcta. Aunque no es eficiente, es un buen algoritmo para aprender."
  ],
  "45": [
    "Quicksort es un algoritmo de ordenamiento eficiente que divide y conquista. Elige un pivote y reorganiza los elementos en torno a él, luego ordena recursivamente las sublistas.",
    "Este algoritmo utiliza un pivote para dividir la lista en dos partes: menores y mayores que el pivote. Es eficiente con una complejidad promedio de O(n log n).",
    "Quicksort organiza los elementos dividiendo la lista en partes menores y mayores respecto a un pivote. Funciona recursivamente hasta que las sublistas están ordenadas."
  ],
  "46": [
    "### Quicksort básico en Python:\n```python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivote = arr[0]\n    menores = [x for x in arr[1:] if x < pivote]\n    mayores = [x for x in arr[1:] if x >= pivote]\n    return quicksort(menores) + [pivote] + quicksort(mayores)\nnumeros = [5, 2, 9, 1, 5]\nprint(quicksort(numeros))\n```",
    "Quicksort optimizado:\n```python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivote = arr[len(arr) // 2]\n    izquierda = [x for x in arr if x < pivote]\n    iguales = [x for x in arr if x == pivote]\n    derecha = [x for x in arr if x > pivote]\n    return quicksort(izquierda) + iguales + quicksort(derecha)\nnumeros = [3, 6, 8, 10, 1, 2, 1]\nprint(quicksort(numeros))\n```",
    "Quicksort con índices explícitos:\n```python\ndef quicksort(arr, inicio, fin):\n    if inicio < fin:\n        pivote = particion(arr, inicio, fin)\n        quicksort(arr, inicio, pivote - 1)\n        quicksort(arr, pivote + 1, fin)\n\ndef particion(arr, inicio, fin):\n    pivote = arr[fin]\n    i = inicio - 1\n    for j in range(inicio, fin):\n        if arr[j] < pivote:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i + 1], arr[fin] = arr[fin], arr[i + 1]\n    return i + 1\n\nnumeros = [4, 2, 7, 3, 8, 1]\nquicksort(numeros, 0, len(numeros) - 1)\nprint(numeros)\n```"
  ],
  "47": [
    "### Algoritmo burbuja básico en Python:\n```python\ndef burbuja(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\nnumeros = [64, 34, 25, 12, 22, 11, 90]\nprint(burbuja(numeros))\n```",
    "Ordenamiento burbuja:\n```python\ndef burbuja(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\nnumeros = [64, 34, 25, 12, 22, 11, 90]\nprint(burbuja(numeros))\n```",
    "Ordenamiento burbuja (bubble sort):\n```python\ndef burbuja(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\nnumeros = [64, 34, 25, 12, 22, 11, 90]\nprint(burbuja(numeros))\n```"
  ],
  "48": [
    "### Recorrido inorden en un árbol binario:\n```python\nclass Nodo:\n    def __init__(self, valor):\n        self.valor = valor\n        self.izquierda = None\n        self.derecha = None\n\ndef inorden(nodo):\n    if nodo:\n        inorden(nodo.izquierda)\n        print(nodo.valor)\n        inorden(nodo.derecha)\n\nraiz = Nodo(10)\nraiz.izquierda = Nodo(5)\nraiz.derecha = Nodo(20)\nraiz.izquierda.izquierda = Nodo(3)\nraiz.izquierda.derecha = Nodo(7)\ninorden(raiz)\n```",
    "Inserción en un árbol binario de búsqueda:\n```python\nclass Nodo:\n    def __init__(self, valor):\n        self.valor = valor\n        self.izquierda = None\n        self.derecha = None\n\ndef insertar(nodo, valor):\n    if nodo is None:\n        return Nodo(valor)\n    if valor < nodo.valor:\n        nodo.izquierda = insertar(nodo.izquierda, valor)\n    else:\n        nodo.derecha = insertar(nodo.derecha, valor)\n    return nodo\n\ndef inorden(nodo):\n    if nodo:\n        inorden(nodo.izquierda)\n        print(nodo.valor)\n        inorden(nodo.derecha)\n\nraiz = None\nvalores = [10, 5, 20, 3, 7]\nfor val in valores:\n    raiz = insertar(raiz, val)\ninorden(raiz)\n```",
    "Recorrido preorden en un árbol:\n```python\nclass Nodo:\n    def __init__(self, valor):\n        self.valor = valor\n        self.izquierda = None\n        self.derecha = None\n\ndef preorden(nodo):\n    if nodo:\n        print(nodo.valor)\n        preorden(nodo.izquierda)\n        preorden(nodo.derecha)\n\nraiz = Nodo(15)\nraiz.izquierda = Nodo(10)\nraiz.derecha = Nodo(20)\nraiz.izquierda.izquierda = Nodo(8)\nraiz.izquierda.derecha = Nodo(12)\npreorden(raiz)\n```"
  ],
  "49": [
    "### Búsqueda en profundidad (DFS) en un grafo:\n```python\ndef dfs(grafo, nodo, visitados):\n    if nodo not in visitados:\n        print(nodo)\n        visitados.add(nodo)\n        for vecino in grafo[nodo]:\n            dfs(grafo, vecino, visitados)\ngrafo = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': [],\n    'E': ['F'],\n    'F': []\n}\ndfs(grafo, 'A', set())\n```",
    "Búsqueda en amplitud (BFS) en un grafo:\n```python\ndef bfs(grafo, inicio):\n    visitados, cola = set(), [inicio]\n    while cola:\n        nodo = cola.pop(0)\n        if nodo not in visitados:\n            print(nodo)\n            visitados.add(nodo)\n            cola.extend(grafo[nodo])\ngrafo = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': [],\n    'E': ['F'],\n    'F': []\n}\nbfs(grafo, 'A')\n```",
    "Cálculo de caminos más cortos con Dijkstra:\n```python\nimport heapq\ndef dijkstra(grafo, inicio):\n    distancias = {nodo: float('infinity') for nodo in grafo}\n    distancias[inicio] = 0\n    cola = [(0, inicio)]\n    while cola:\n        actual_dist, actual_nodo = heapq.heappop(cola)\n        for vecino, peso in grafo[actual_nodo].items():\n            distancia = actual_dist + peso\n            if distancia < distancias[vecino]:\n                distancias[vecino] = distancia\n                heapq.heappush(cola, (distancia, vecino))\n    return distancias\ngrafo = {\n    'A': {'B': 1, 'C': 4},\n    'B': {'C': 2, 'D': 5},\n    'C': {'D': 1},\n    'D': {}\n}\nprint(dijkstra(grafo, 'A'))\n```"
  ],
  "50": [
    "### Ordenamiento por selección:\n```def seleccion(arr):\n for i in range(len(arr)):\n  min_idx = i\n  for j in range(i+1, len(arr)):\n   if arr[j] < arr[min_idx]:\n    min_idx = j\n  arr[i], arr[min_idx] = arr[min_idx], arr[i]\n return arr\n```",
    "Ordenamiento por Selección (Selection Sort):\n```def seleccion(arr):\n for i in range(len(arr)):\n  min_idx = i\n  for j in range(i+1, len(arr)):\n   if arr[j] < arr[min_idx]:\n    min_idx = j\n  arr[i], arr[min_idx] = arr[min_idx], arr[i]\n return arr\n```",
    "El algoritmo más simple para el ordenamiento lineal es por seleccion:\n```def seleccion(arr):\n for i in range(len(arr)):\n  min_idx = i\n  for j in range(i+1, len(arr)):\n   if arr[j] < arr[min_idx]:\n    min_idx = j\n  arr[i], arr[min_idx] = arr[min_idx], arr[i]\n return arr\n```"
  ],
  "51": [
    "### Búsqueda lineal:\n```python\ndef busqueda_lineal(arr, objetivo):\n    for i in range(len(arr)):\n        if arr[i] == objetivo:\n            return i\n    return -1\nnumeros = [10, 20, 30, 40, 50]\nprint(busqueda_lineal(numeros, 30))\n```",
    "Búsqueda binaria:\n```python\ndef busqueda_binaria(arr, objetivo):\n    inicio, fin = 0, len(arr) - 1\n    while inicio <= fin:\n        medio = (inicio + fin) // 2\n        if arr[medio] == objetivo:\n            return medio\n        elif arr[medio] < objetivo:\n            inicio = medio + 1\n        else:\n            fin = medio - 1\n    return -1\nnumeros = [10, 20, 30, 40, 50]\nprint(busqueda_binaria(numeros, 40))\n```",
    "Búsqueda secuencial con elementos no numéricos:\n```python\ndef busqueda_secuencial(arr, objetivo):\n    for i, elemento in enumerate(arr):\n        if elemento == objetivo:\n            return i\n    return -1\npalabras = ['manzana', 'banana', 'cereza', 'durazno']\nprint(busqueda_secuencial(palabras, 'cereza'))\n```"
  ],
  "52": [
    "JavaScript es un lenguaje de programación dinámico y basado en prototipos utilizado principalmente para el desarrollo web. Quieres saber como instarlo?",
    "JavaScript es un lenguaje orientado a objetos basado en prototipos, lo que permite crear y extender objetos de forma flexible. Puedo explicarte como se instala?",
    "Es un lenguaje que se ejecuta tanto en el lado del cliente (navegadores web) como en el lado del servidor. Quieres saber como instalarlo?",
    "JavaScript es interpretado directamente por el navegador o el entorno de ejecución, sin necesidad de compilarse previamente. Puedo explicarte como instalarlo",
    "JavaScript permite añadir interactividad y dinamismo a los sitios web, como menús desplegables, animaciones y validaciones de formularios. Quieres saber como instalarlo?"
  ],
  "53": [
    "Para instalar javascript en windows sigue los siguiente pasos:\n\t1. ingresa a https://nodejs.org/en/download\n\t2. Descarga el instalador para windows que se encuentra en la parte baja de la pagina.\n\t3.Ejecuta el instalador y sigue los pasos.\n\t4.verifica la instalacion abriendo una terminal y corriendo el siguiente comando.\n\t```bash\n\t\t node -v\n\t\t npm -v\n\t```\nPara instalarlo en linux o macOS siga los siguientes pasos:\n\t1.Abra una terminal.\n\t2.Ejecute el siguiente comando:\n\t\tcurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n\t3.Luego ejecute el siguiente comando:\n\t\t nvm install #version(por ejemplos 22)\n\t4.Verifica la instalacion con los siguientes comandos:\n\t\t* node -v\n\t\t*nvm current\n\t5.Verifica la instalacion de npm con el siguiente comando:\n\t\tnpm -v",
    "Puede instalar javascript en windows,linux o macOs de la siguiente forma:\nwindows:\n\t1. Ingresa a https://nodejs.org/en/download\n\t2. Descarga el instalador para windows que se encuentra en la parte baja de la pagina.\n\t3.Ejecuta el instalador y sigue los pasos.\n\t4.verifica la instalacion abriendo una terminal y corriendo el siguiente comando.\n\t```bash\n\t\t node -v\n\t\t npm -v\n\t```\nlinux o macOS:\n\t1.Abra una terminal.\n\t2.Ejecute el siguiente comando:\n\t\tcurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n\t3.Luego ejecute el siguiente comando:\n\t\t nvm install #version(por ejemplos 22)\n\t4.Verifica la instalacion con los siguientes comandos:\n\t\t* node -v\n\t\t*nvm current\n\t5.Verifica la instalacion de npm con el siguiente comando:\n\t\tnpm -v",
    "Una forma simple de utilizar javascript es abrir cualquier navegador(como chrome, mozilla o edge) con el comando: ctrl+shift+J"
  ],
  "54": [
    "Para ejecutar codigo de javascript puedes hacerlo desde el navegador abra la consola con ctrl+shift+J escribra el codigo por ejemplo \"console.log(\"hola\")\" luego presione Enter",
    "Una forma de ejecutar codigo de javascript es creando un archivo con extension .js y luego en una terminal ejecute el comando node archivo.js",
    "Puede ejecutar codigo de javascript en un archivo HTML incluya su codigo dentro de una etiqueta <script></script> este codigo se ejecutara al abrir el archivo en el navegador"
  ],
  "55": [
    "En javascript se pueden declarar variables con la palabra reservada var. Por ejemplo se va a declarar una variable que guarde un saludo: var saludo = \"Hola mundo\"",
    "En javascript las variables se pueden declarar con la palabra reservada let. Por ejemplo se va a declarar una que almacene un numero: let numero = 10",
    "En javascript es posible declarar variables con la palabra reservada const. por ejemplo se declarara una variable que guarde el valor de pi: const pi = 3.1416"
  ],
  "56": [
    "Una de las diferencias entre var, let y const es que var tiene una ambito de funcion es decir que la variable puede ser accedida en cualquier parte de la funcion en la que fue declarada, las variables declaradas con let y const tienen un ambito de bloque lo que significa que las variables solo pueden ser accedidas en el bloque en el que fueron declaradas.",
    "Una de las diferencias entre var, let y const es que let y const no pueden redeclararse mientras que var si puede redeclararse por ejemplo:\nvar mensaje=\"hola\"\nvar mensaje=\"adios\"//esto funciona\n\nlet mensaje=\"hola\"\nlet mensaje=\"adios\"//se genera un error debido a que la variable ya existe sucede lo mismo con const",
    "Una de las diferencias entre var, let y const es que mientras que var y let pueden cambiar de valor, a const no se le puede cambiar el valor con el que se declara por ejemplo:\nlet numero = 10\nnumero=0//esto esta permitido\n\nconst numero = 5\nnumero=10//esto da error",
    "Una de las diferencias entre var, let y const es que var se inicializa como undefined si no se le asigna un valor mientras que let y const not tienen valor hasta que no se inicializan"
  ],
  "57": [
    "Claro aqui tienes un ejemplo de un for en javascript\nfor(let i=0;i<10;i++){\n\tconsole.log(i)\n}",
    "Aqui tienes un ejemplo mas complejo de un for en javascript\nconst num=[10,9,5,3,7,1]\nfor(let i = 0;i<num.length;i++){\n\tconsole.log(num[i])\n}\n",
    "Aqui tienes un ejemplo de un for en javascript\nconst colores = [\"Rojo\", \"Verde\", \"Azul\"]\nfor (const color of colores) {\n\tconsole.log(color)\n}"
  ],
  "58": [
    "Con mucho gusto aqui tienes un ejemplo de while en javascript\nlet i=1\nwhile(i<5){\n\tconsole.log(i)\n\ti++\n}",
    "Claro aqui tienes un ejemplo de un while en javascript\nlet i = 10\nwhile (i > 0) {\n\tconsole.log(i)\n\ti--\n}",
    "Aqui tienes un while en javascript\nconst frutas = [\"Manzana\", \"Banana\", \"Naranja\"]\nlet i = 0\nwhile (i < frutas.length) {\n\tconsole.log(frutas[i])\n\ti++\n}"
  ],
  "59": [
    "Aqui tienes un if simple en javascript:\nlet i = 5\nif(i>=0){\n\tconsole.log(\"el numero es positivo\")\n}",
    "Claro aqui tienes un ejemplo de un if en javascript:\nlet edad = 15\nif(edad >= 18){\n\tconsole.log(\"puedes conducir\")\n}else{\n\tconsole.log(\"no puedes conducir\")\n}",
    "Aqui tienes un ejemplo de un if en javascript:\nlet numero = 8\nif(numero % 2 === 8){\n\tconsole.log(\"el numero es par\")\n}",
    "Aqui tienes un ejemplo de un if en javascript:\nlet a = 5, b = 10\nif (a > b) {\n\tconsole.log(\"a es mayor que b.\")\n} else if (a < b) {\n\tconsole.log(\"a es menor que b.\")\n} else {\n\tconsole.log(\"a es igual a b.\")\n}",
    "Con mucho gusto aqui tienes un ejemplo de if en javascript:\nlet valor = null\nif (valor == null) {\n\tconsole.log(\"El valor es null o undefined.\")\n}"
  ],
  "60": [
    "Aqui esta la declaracion de una funcion en javascript:\nfunction sumar(a, b){\n\treturn a+b\n}\nconsole.log(sumar(3,5))\n Esta funcion realiza la suma de dos valores",
    "Aqui tiene un ejemplo de una funcion en javascript:\nfunction esPar(numero) {\n\treturn numero % 2 === 0\n}\nconsole.log(esPar(4))\nconsole.log(esPar(5))\nesta funcion verifica si un numero es par o impar",
    "Aqui tienes una funcion en javascript que recibe un nombre como parametro y manda una saludo al usuario:\nfunction saludar(nombre) {\n\treturn `Hola, ${nombre}!`\n}\nconsole.log(saludar(\"Juan\"))",
    "Aqui tienes un ejemplo de una funcion que convierte celsius a fahrenheit en javascript:\nfunction celsiusAFahrenheit(celsius) {\n\treturn (celsius * 9/5) + 32\n}"
  ],
  "61": [
    "Una clase en javascript:\nclass Persona {\n\tsaludar() {\n\t\tconsole.log(\"Hola, soy una persona.\")\n\t}\n}\n\nconst persona = new Persona()\npersona.saludar()",
    "Aqui tienes una clase en javascript que posee un constructor:\nclass Persona {\n\tconstructor(nombre, edad) {\n\t\tthis.nombre = nombre\n\t\tthis.edad = edad\n\t}\n\tsaludar() {\n\t\tconsole.log(`Hola, me llamo ${this.nombre} y tengo ${this.edad} años.`)\n\t}\n}\nconst persona = new Persona(\"Juan\", 30)\npersona.saludar() // \"Hola, me llamo Juan y tengo 30 años.\"",
    "Aqui tienes un ejemplo de una clase en javascript:\nclass Rectangulo {\n\tconstructor(ancho, alto) {\n\t\tthis.ancho = ancho\n\t\tthis.alto = alto\n\t}\n\n\tcalcularArea() {\n\t\treturn this.ancho * this.alto\n\t}\n}\n\nconst rectangulo = new Rectangulo(5, 10)\nconsole.log(rectangulo.calcularArea()) // 50",
    "Claro aqui tienes una ejemplo de una clase en javascript:\nclass Calculadora {\n\tsumar(a, b) {\n\t\treturn a + b\n\t}\n\n\trestar(a, b) {\n\t\treturn a - b\n\t}\n}\n\nconsole.log(Calculadora.sumar(5, 3))// 8\nconsole.log(Calculadora.restar(10, 4))// 6"
  ],
  "62": [
    "Aqui tienes un ejemplo de como crear un objeto literal en javascript:\nconst persona = {\n\tnombre: \"Juan\",\n\tedad: 30,\n\tsaludar: function() {\n\t\tconsole.log(`Hola, me llamo ${this.nombre}`)\n\t}\n}\nconsole.log(persona.nombre)//Juan\npersona.saludar()//Hola, me llamo Juan",
    "Puedes crear un objeto en javascript la clase Object() aqui tienes un ejemplo:\nconst persona = new Object()\npersona.nombre = \"María\"\npersona.edad = 25\nconsole.log(persona) // { nombre: \"María\", edad: 25 }",
    "Puedes crear un objeto en javascript creando una clase y luego creando una instancia de la clase como en el siguiente ejemplo:\nclass Persona {\n\tconstructor(nombre,edad){\n\t\tthis.nombre=nombre\n\t\tthis.edad=edad\n\t}\n}\nconst persona= new Persona(\"Lucia\",30)\nconsole.log(persona)// Persona { nombre: \"Lucía\", edad: 22 }",
    "Aqui tienes un ejemplo de como crear una objeto en javascript usando una funcion constructora:\nfunction Persona(nombre, edad) {\n\tthis.nombre = nombre\n\tthis.edad = edad\n}\nconst persona = new Persona(\"Carlos\", 28)\nconsole.log(persona)// Persona { nombre: \"Carlos\", edad: 28 }"
  ],
  "63": [
    "Aqui tienes un ejemplo de polimorfismo en javascript:\nclass Animal {\n\thacerSonido() {\n\t\tconsole.log(\"El animal hace un sonido.\")\n\t}\n}\n\nclass Perro extends Animal {\n\tthacerSonido() {\n\t\tconsole.log(\"El perro ladra: ¡Guau!.\")\n\t}\n}\n\nconst animales = [new Animal(), new Perro(), new Gato()]\nanimales.forEach(animal => animal.hacerSonido())",
    "Aqui tienes un ejemplo de polimorfismo con funciones en javascript:\nfunction saludar(persona) {\n\tconsole.log(`Hola, ${persona.saludo()}`)\n}\nclass Persona {\n\tsaludo() {\n\t\t return \"soy una persona.\"\n\t}\n}\nclass Robot {\n\tsaludo() {\n\t\treturn \"soy un robot.\"\n\t}\n}\n\nsaludar(new Persona())// Hola, soy una persona.\nsaludar(new Robot())// Hola, soy un robot.",
    "Aqui tienes un ejemplo de polimorfismo con objetos literales en javascript:\nconst humano = {\n\tcaminar: () => console.log(\"El humano camina sobre dos piernas.\")\n}\n\nconst perro = {\n\tcaminar: () => console.log(\"El perro camina sobre cuatro patas.\")\n}\n\nconst objetos = [humano, perro]\nobjetos.forEach(obj => obj.caminar())"
  ],
  "64": [
    "Aqui tienes un ejemplo de herencia en javascript:\nclass Animal {\n\tconstructor(nombre) {\n\t\tthis.nombre = nombre\n\t}\n\thacerSonido() {\n\t\tconsole.log(\"Sonido genérico de animal.\")\n\t}\n}\n\nclass Perro extends Animal {\n\thacerSonido() {\n\t\tconsole.log(\"Guau guau\")\n\t}\n}\n\nconst perro = new Perro(\"Firulais\")\nperro.hacerSonido()//\"Guau guau\"",
    "Puedes aplicar herencia en una clase en javascript de la siguiente forma:\nclass Vehiculo {\n\tconstructor(marca) {\n\t\tthis.marca = marca\n\t}\n\tarrancar() {\n\t\tconsole.log(\"El vehículo está arrancando.\")\n\t}\n}\n\nclass Coche extends Vehiculo {\n\tconstructor(marca, modelo) {\n\t\tsuper(marca)// Llama al constructor de la clase base\n\t\tthis.modelo = modelo\n\t}\n\tarrancar() {\n\t\t console.log(`El coche ${this.marca} modelo ${this.modelo} está arrancando.`)\n\t}\n}\n\nconst coche = new Coche(\"Toyota\", \"Corolla\")\ncoche.arrancar()// \"El coche Toyota modelo Corolla está arrancando.\"",
    "Puedes aplicar herencia usando metodos estaticos en javascript como en el siguiente ejemplo:\nclass Calculadora {\n\tstatic sumar(a, b) {\n\t\treturn a + b\n\t}\n}\n\nclass CalculadoraAvanzada extends Calculadora {\n\tstatic multiplicar(a, b) {\n\t\treturn a * b\n\t}\n}\n\nconsole.log(CalculadoraAvanzada.sumar(3, 4))// 7\nconsole.log(CalculadoraAvanzada.multiplicar(3, 4))// 12"
  ],
  "65": [
    "Puedes aplicar encapsulamiento en javascript de la siguiente forma:\nclass Persona {\n\tconstructor(nombre, edad) {\n\t\tthis.nombre = nombre// Propiedad pública\n\t\tthis.edad = edad// Propiedad pública\n\t}\n\n\tsaludar() {\n\t\tconsole.log(`Hola, me llamo ${this.nombre} y tengo ${this.edad} años.`)\n\t}\n}\n\nconst persona = new Persona(\"Ana\", 30)\npersona.saludar()// \"Hola, me llamo Ana y tengo 30 años.\"",
    "Aqui tienes un ejemplo de como aplicar encapsulamiento en javascript con propiedades privadas:\nclass CuentaBancaria {\n\t#saldo = 0// Propiedad privada\n\tdepositar(cantidad) {\n\t\tthis.#saldo += cantidad\n\t}\n\n\tobtenerSaldo() {\n\t\treturn this.#saldo\n\t}\n}\n\nconst cuenta = new CuentaBancaria()\ncuenta.depositar(500)\nconsole.log(cuenta.obtenerSaldo())// 500",
    "Puedes aplicar encapsulamiento en javascript con funciones getter y setter de la siguiente forma:\nclass Producto {\n\t#precio = 0\n\tget precio() {\n\t\treturn this.#precio\n\t}\n\n\tset precio(valor) {\n\t\tif (valor < 0) {\n\t\t\tconsole.log(\"El precio no puede ser negativo.\")\n\t\t}else{\n\t\t\tthis.#precio = valor\n\t\t}\n\t}\n}\n\nconst producto = new Producto()\nproducto.precio = 100// Asigna un valor\nconsole.log(producto.precio)// 100\nproducto.precio = -50// \"El precio no puede ser negativo.\""
  ],
  "66": [
    "### Quicksort básico en JavaScript:\n```javascript\nfunction quicksort(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const pivot = arr[0];\n    const menores = arr.slice(1).filter(x => x < pivot);\n    const mayores = arr.slice(1).filter(x => x >= pivot);\n    return quicksort(menores).concat(pivot, quicksort(mayores));\n}\n\nconst numeros1 = [5, 2, 9, 1, 5];\nconsole.log(quicksort(numeros1)); // Resultado: [1, 2, 5, 5, 9]\n```",
    "### Quicksort optimizado en JavaScript:\n```javascript\nfunction quicksortOptimizado(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const pivot = arr[Math.floor(arr.length / 2)];\n    const izquierda = arr.filter(x => x < pivot);\n    const iguales = arr.filter(x => x === pivot);\n    const derecha = arr.filter(x => x > pivot);\n    return quicksortOptimizado(izquierda).concat(iguales, quicksortOptimizado(derecha));\n}\n\nconst numeros2 = [3, 6, 8, 10, 1, 2, 1];\nconsole.log(quicksortOptimizado(numeros2)); // Resultado: [1, 1, 2, 3, 6, 8, 10]\n```",
    "### Quicksort con índices explícitos en JavaScript:\n```javascript\nfunction quicksortConIndices(arr, inicio, fin) {\n    if (inicio < fin) {\n        const pivote = particion(arr, inicio, fin);\n        quicksortConIndices(arr, inicio, pivote - 1);\n        quicksortConIndices(arr, pivote + 1, fin);\n    }\n}\n\nfunction particion(arr, inicio, fin) {\n    const pivot = arr[fin];\n    let i = inicio - 1;\n    for (let j = inicio; j < fin; j++) {\n        if (arr[j] < pivot) {\n            i++;\n            [arr[i], arr[j]] = [arr[j], arr[i]]; // Intercambio\n        }\n    }\n    [arr[i + 1], arr[fin]] = [arr[fin], arr[i + 1]];\n    return i + 1;\n}\n\nconst numeros3 = [4, 2, 7, 3, 8, 1];\nquicksortConIndices(numeros3, 0, numeros3.length - 1);\nconsole.log(numeros3); // Resultado: [1, 2, 3, 4, 7, 8]\n```"
  ],
  "67": [
    "### Algoritmo burbuja básico en JavaScript:\n```function burbuja(arr) {\n let n = arr.length;\n for (let i = 0; i < n; i++) {\n  for (let j = 0; j < n - i - 1; j++) {\n   if (arr[j] > arr[j + 1]) {\n    [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n   }\n  }\n }\n return arr;\n```",
    "### Ordenamiento burbuja en JavaScript:\n```function burbuja(arr) {\n let n = arr.length;\n for (let i = 0; i < n; i++) {\n  for (let j = 0; j < n - i - 1; j++) {\n   if (arr[j] > arr[j + 1]) {\n    [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n   }\n  }\n }\n return arr;\n```",
    "### Burbuja(Bubble Sort) en JavaScript:\n```function burbuja(arr) {\n let n = arr.length;\n for (let i = 0; i < n; i++) {\n  for (let j = 0; j < n - i - 1; j++) {\n   if (arr[j] > arr[j + 1]) {\n    [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n   }\n  }\n }\n return arr;\n```"
  ],
  "68": [
    "### Recorrido inorden en un árbol binario:\n```javascript\nclass Nodo {\n    constructor(valor) {\n        this.valor = valor;\n        this.izquierda = null;\n        this.derecha = null;\n    }\n}\n\nfunction inorden(nodo) {\n    if (nodo !== null) {\n        inorden(nodo.izquierda);\n        console.log(nodo.valor);\n        inorden(nodo.derecha);\n    }\n}\n\nconst raiz = new Nodo(10);\nraiz.izquierda = new Nodo(5);\nraiz.derecha = new Nodo(20);\nraiz.izquierda.izquierda = new Nodo(3);\nraiz.izquierda.derecha = new Nodo(7);\ninorden(raiz);\n```",
    "### Inserción en un árbol binario de búsqueda:\n```javascript\nclass Nodo {\n    constructor(valor) {\n        this.valor = valor;\n        this.izquierda = null;\n        this.derecha = null;\n    }\n}\n\nfunction insertar(nodo, valor) {\n    if (nodo === null) {\n        return new Nodo(valor);\n    }\n    if (valor < nodo.valor) {\n        nodo.izquierda = insertar(nodo.izquierda, valor);\n    } else {\n        nodo.derecha = insertar(nodo.derecha, valor);\n    }\n    return nodo;\n}\n\nfunction inorden(nodo) {\n    if (nodo !== null) {\n        inorden(nodo.izquierda);\n        console.log(nodo.valor);\n        inorden(nodo.derecha);\n    }\n}\n\nlet raiz = null;\nconst valores = [10, 5, 20, 3, 7];\nfor (const val of valores) {\n    raiz = insertar(raiz, val);\n}\ninorden(raiz);\n```",
    "### Recorrido preorden en un árbol:\n```javascript\nclass Nodo {\n    constructor(valor) {\n        this.valor = valor;\n        this.izquierda = null;\n        this.derecha = null;\n    }\n}\n\nfunction preorden(nodo) {\n    if (nodo !== null) {\n        console.log(nodo.valor);\n        preorden(nodo.izquierda);\n        preorden(nodo.derecha);\n    }\n}\n\nconst raiz = new Nodo(15);\nraiz.izquierda = new Nodo(10);\nraiz.derecha = new Nodo(20);\nraiz.izquierda.izquierda = new Nodo(8);\nraiz.izquierda.derecha = new Nodo(12);\npreorden(raiz);\n```"
  ],
  "69": [
    "### Recorrido inorden en un árbol binario:\n```javascript\nclass Nodo {\n    constructor(valor) {\n        this.valor = valor;\n        this.izquierda = null;\n        this.derecha = null;\n    }\n}\n\nfunction inorden(nodo) {\n    if (nodo !== null) {\n        inorden(nodo.izquierda);\n        console.log(nodo.valor);\n        inorden(nodo.derecha);\n    }\n}\n\nconst raiz = new Nodo(10);\nraiz.izquierda = new Nodo(5);\nraiz.derecha = new Nodo(20);\nraiz.izquierda.izquierda = new Nodo(3);\nraiz.izquierda.derecha = new Nodo(7);\ninorden(raiz);\n```",
    "### Inserción en un árbol binario de búsqueda:\n```javascript\nclass Nodo {\n    constructor(valor) {\n        this.valor = valor;\n        this.izquierda = null;\n        this.derecha = null;\n    }\n}\n\nfunction insertar(nodo, valor) {\n    if (nodo === null) {\n        return new Nodo(valor);\n    }\n    if (valor < nodo.valor) {\n        nodo.izquierda = insertar(nodo.izquierda, valor);\n    } else {\n        nodo.derecha = insertar(nodo.derecha, valor);\n    }\n    return nodo;\n}\n\nfunction inorden(nodo) {\n    if (nodo !== null) {\n        inorden(nodo.izquierda);\n        console.log(nodo.valor);\n        inorden(nodo.derecha);\n    }\n}\n\nlet raiz = null;\nconst valores = [10, 5, 20, 3, 7];\nfor (const val of valores) {\n    raiz = insertar(raiz, val);\n}\ninorden(raiz);\n```",
    "### Recorrido preorden en un árbol:\n```javascript\nclass Nodo {\n    constructor(valor) {\n        this.valor = valor;\n        this.izquierda = null;\n        this.derecha = null;\n    }\n}\n\nfunction preorden(nodo) {\n    if (nodo !== null) {\n        console.log(nodo.valor);\n        preorden(nodo.izquierda);\n        preorden(nodo.derecha);\n    }\n}\n\nconst raiz = new Nodo(15);\nraiz.izquierda = new Nodo(10);\nraiz.derecha = new Nodo(20);\nraiz.izquierda.izquierda = new Nodo(8);\nraiz.izquierda.derecha = new Nodo(12);\npreorden(raiz);\n```"
  ],
  "70": [
    "### El algoritmo de ordenamiento por selección (selection sort):\n```function selection(arr) {\n for (let i = 0; i < arr.length; i++) {\n let minIdx = i;\n for (let j = i + 1; j < arr.length; j++) {\n if (arr[j] < arr[minIdx]) {\n minIdx = j;\n }\n }\n [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n }\n return arr;\n}\n```",
    "### Ordenamiento por selección:\n```function selection(arr) {\n for (let i = 0; i < arr.length; i++) {\n let minIdx = i;\n for (let j = i + 1; j < arr.length; j++) {\n if (arr[j] < arr[minIdx]) {\n minIdx = j;\n }\n }\n [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n }\n return arr;\n}\n```",
    "### El ordenamiento por selección es:\n```function selection(arr) {\n for (let i = 0; i < arr.length; i++) {\n let minIdx = i;\n for (let j = i + 1; j < arr.length; j++) {\n if (arr[j] < arr[minIdx]) {\n minIdx = j;\n }\n }\n [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n }\n return arr;\n}\n```"
  ],
  "71": [
    "### Búsqueda lineal:\n```javascript\nfunction busquedaLineal(arr, objetivo) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === objetivo) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst numeros = [10, 20, 30, 40, 50];\nconsole.log(busquedaLineal(numeros, 30));\n```",
    "### Búsqueda binaria:\n```javascript\nfunction busquedaBinaria(arr, objetivo) {\n    let inicio = 0;\n    let fin = arr.length - 1;\n\n    while (inicio <= fin) {\n        const medio = Math.floor((inicio + fin) / 2);\n\n        if (arr[medio] === objetivo) {\n            return medio;\n        } else if (arr[medio] < objetivo) {\n            inicio = medio + 1;\n        } else {\n            fin = medio - 1;\n        }\n    }\n\n    return -1;\n}\n\nconst numeros = [10, 20, 30, 40, 50];\nconsole.log(busquedaBinaria(numeros, 40));\n```",
    "### Búsqueda secuencial con elementos no numéricos:\n```javascript\nfunction busquedaSecuencial(arr, objetivo) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === objetivo) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst palabras = ['manzana', 'banana', 'cereza', 'durazno'];\nconsole.log(busquedaSecuencial(palabras, 'cereza'));\n```"
  ],
  "72": [
    "Aqui tienes la definicion de la funcion suma en python:\ndef suma(a, b):\n\treturn a + b",
    "Aqui tienes el codigo de la funcion suma en python:\ndef suma(a, b):\n\treturn a + b",
    "Claro, Aqui tienes el codigo de la funcion suma en python:\ndef suma(a, b):\n\treturn a + b"
  ],
  "73": [
    "Aqui tienes el calculo de la sum en la funcion suma en python:\nreturn a + b",
    "Aqui tienes el codigo que hace la suma dentro de la funcion suma en python:\nreturn a + b",
    "Claro, Aqui tienes el codigo que realiza la suma en la funcion suma en python:\nreturn a + b"
  ],
  "74": [
    "Aqui estan las lecturas de valores del codigo del ejemplo de la funcion suma en python:\nnum1 = int(input('Ingresa el primer número: '))\nnum2 = int(input('Ingresa el segundo número: '))",
    "Aqui tienes las lineas de codigo que hace la lectura de valores para el ejemplo de la funcion suma en python:\nnum1 = int(input('Ingresa el primer número: '))\nnum2 = int(input('Ingresa el segundo número: '))",
    "Aqui tienes las lecturas de valores del ejemplo de la funcion suma en python:\nnum1 = int(input('Ingresa el primer número: '))\nnum2 = int(input('Ingresa el segundo número: '))"
  ],
  "75": [
    "Aqui tienes el codigo que hace la llamada de la funcion suma en python:\nresultado = suma(num1, num2)",
    "Aqui tienes la linea de codigo que llama a la funcion suma en python:\nresultado = suma(num1, num2)",
    "Claro, aqui estan el codigo que hace la llamada a la funcion suma en python:\nresultado = suma(num1, num2)"
  ],
  "76": [
    "Claro, aqui tienes el codigo que muestra el resultado de la funcion suma en python:\nprint(f'El resultado de la suma es: {resultado}')",
    "Aqui tienes la linea de codigo que muestra el resultado de la funcion suma en python:\nprint(f'El resultado de la suma es: {resultado}')",
    "Aqui esta la linea de codigo que muestra el resultado de la funcion suma en python:\nprint(f'El resultado de la suma es: {resultado}')"
  ],
  "77": [
    "Claro, aqui tienes el while del ejemplo del numero secreto en python:\nwhile True:\n\tintento = int(input('Ingresa tu número: '))\n\tintentos += 1\n\tif intento == numero_secreto:\n\t\tprint(f'¡Felicidades! Adivinaste en {intentos} intentos.')\n\t\tbreak\n\telif intento < numero_secreto:\n\t\tprint('El número es mayor. Intenta nuevamente.')\n\telse:\n\t\tprint('El número es menor. Intenta nuevamente.')",
    "Aqui tienes el codigo del while en el ejemplo del numero secreto en python:\nwhile True:\n\tintento = int(input('Ingresa tu número: '))\n\tintentos += 1\n\tif intento == numero_secreto:\n\t\tprint(f'¡Felicidades! Adivinaste en {intentos} intentos.')\n\t\tbreak\n\telif intento < numero_secreto:\n\t\tprint('El número es mayor. Intenta nuevamente.')\n\telse:\n\t\tprint('El número es menor. Intenta nuevamente.')",
    "A continuacion te muestro el codigo del while en el ejemplo del numero secreto en python:\nwhile True:\n\tintento = int(input('Ingresa tu número: '))\n\tintentos += 1\n\tif intento == numero_secreto:\n\t\tprint(f'¡Felicidades! Adivinaste en {intentos} intentos.')\n\t\tbreak\n\telif intento < numero_secreto:\n\t\tprint('El número es mayor. Intenta nuevamente.')\n\telse:\n\t\tprint('El número es menor. Intenta nuevamente.')"
  ],
  "78": [
    "Aqui tienes el codigo del if que se encuentra en el ejemplo del numero secreto en python:\nif intento == numero_secreto:\n\tprint(f'¡Felicidades! Adivinaste en {intentos} intentos.')\n\tbreak\nelif intento < numero_secreto:\n\tprint('El número es mayor. Intenta nuevamente.')\nelse:\n\tprint('El número es menor. Intenta nuevamente.')",
    "Claro, aqui esta el if del ejemplo del numero secreto en python:\nif intento == numero_secreto:\n\tprint(f'¡Felicidades! Adivinaste en {intentos} intentos.')\n\tbreak\nelif intento < numero_secreto:\n\tprint('El número es mayor. Intenta nuevamente.')\nelse:\n\tprint('El número es menor. Intenta nuevamente.')",
    "Claro, a continuacion te muestro el codigo del if que se encuentra en el ejemplo del numero secreto en python:\nif intento == numero_secreto:\n\tprint(f'¡Felicidades! Adivinaste en {intentos} intentos.')\n\tbreak\nelif intento < numero_secreto:\n\tprint('El número es mayor. Intenta nuevamente.')\nelse:\n\tprint('El número es menor. Intenta nuevamente.')"
  ],
  "79": [
    "Aqui tienes el ejemplo del uso de dataclass para crear constantes en python:\n@dataclass(frozen=True)\nclass Constantes:\n\tPI: float = 3.14159\n\tE: float = 2.71828",
    "Claro, aqui esta el codigo del ejemplo de dataclass para constantes en python:\n@dataclass(frozen=True)\nclass Constantes:\n\tPI: float = 3.14159\n\tE: float = 2.71828",
    "Aqui esta el codigo del ejemplo que crea un dataclass para crear constantes en python:\n@dataclass(frozen=True)\nclass Constantes:\n\tPI: float = 3.14159\n\tE: float = 2.71828"
  ],
  "80": [
    "Claro, aqui tienes el constructor de la clase Persona en python:\ndef __init__(self, nombre, edad):\n\tself.nombre = nombre\n\tself.edad = edad",
    "Aqui tienes el codigo del constructor de la clase Persona en python:\ndef __init__(self, nombre, edad):\n\tself.nombre = nombre\n\tself.edad = edad",
    "Claro, a continuacion te muestro el constructor de la clase Persona en python:\ndef __init__(self, nombre, edad):\n\tself.nombre = nombre\n\tself.edad = edad"
  ],
  "81": [
    "Aqui tienes el codigo del metodo saludar de la clase persona en python:\ndef saludar(self):\n\tprint(f'Hola, soy {self.nombre}')",
    "Claro, aqui esta la definicion del metodo saludar de la clase Persona en python:\ndef saludar(self):\n\tprint(f'Hola, soy {self.nombre}')",
    "Claro, a continuacion te muestro el metodo saludar de la clase Persona en python:\ndef saludar(self):\n\tprint(f'Hola, soy {self.nombre}')"
  ],
  "82": [
    "Aqui tienes el codigo que crea la nueva instancia de la clase Persona en python:\npersona = Persona('Ana', 30)",
    "Claro, aqui tienes la linea de codigo que crea una nueva instancia de la clase Persona en python:\npersona = Persona('Ana', 30)",
    "Claro, aqui esta la linea de codigo que crea la nueva instancia de la clase Persona en python:\npersona = Persona('Ana', 30)"
  ],
  "83": [
    "Claro, aqui tienes el constructor de la clase Animal en python:\ndef __init__(self, especie):\n\tself.especie = especie",
    "Aqui tienes el codigo del constructor de la clase Animal en python:\ndef __init__(self, especie):\n\tself.especie = especie",
    "Claro, a continuacion te muestro el constructor de la clase Animal en python:\ndef __init__(self, especie):\n\tself.especie = especie"
  ],
  "84": [
    "Claro, aqui tienes el constructor de la clase Perro en python:\ndef __init__(self, nombre, raza):\n\tsuper().__init__('Perro')\n\tself.nombre = nombre\n\t\tself.raza = raza",
    "Aqui tienes el codigo del constructor de la clase Perro en python:\ndef __init__(self, nombre, raza):\n\tsuper().__init__('Perro')\n\tself.nombre = nombre\n\t\tself.raza = raza",
    "Claro, aqui esta el codigo del constructor de la clase Perro en python:\ndef __init__(self, nombre, raza):\n\tsuper().__init__('Perro')\n\tself.nombre = nombre\n\t\tself.raza = raza"
  ],
  "85": [
    "Claro, aqui tienes el if del algorimto quicksort basico en python:\nif len(arr) <= 1:\n\treturn arr\nEste if sirve como la condicion de parada del algoritmo",
    "Aqui esta el if del algoritmo quicksort basico en python:\nif len(arr) <= 1:\n\treturn arr\nEste if sirve como la condicion de parada del algoritmo",
    "Claro, aqui esta el if del algoritmo quicksort basico en python:\nif len(arr) <= 1:\n\treturn arr\nEste if sirve como la condicion de parada del algoritmo"
  ],
  "86": [
    "Aqui tienes la asignacion del pivote del algoritmo quicksort basico en python:\npivote = arr[0]",
    "Claro, aqui esta el codigo que asigna el pivote del algoritmo quicksort basico en python:\npivote = arr[0]",
    "Aqui esta la asignacion del pivote del algoritmo quicksort basico en python:\npivote = arr[0]"
  ],
  "87": [
    "Claro, aqui tienes la division de la lista en el algoritmo quicksort basico en python:\nmenores = [x for x in arr[1:] if x < pivote]#en esta lista se guardan los valores menores que el pivote\nmayores = [x for x in arr[1:] if x >= pivote]#en esta lista se guardan los valores que son mayores que el pivote",
    "Aqui esta el codigo que divide la lista en el algoritmo quicksort basico en python:\nmenores = [x for x in arr[1:] if x < pivote]#en esta lista se guardan los valores menores que el pivote\nmayores = [x for x in arr[1:] if x >= pivote]#en esta lista se guardan los valores que son mayores que el pivote",
    "Aqui tienes el codigo que genera sublistas en el algoritmo quicksort basico en python:\nmenores = [x for x in arr[1:] if x < pivote]#en esta lista se guardan los valores menores que el pivote\nmayores = [x for x in arr[1:] if x >= pivote]#en esta lista se guardan los valores que son mayores que el pivote"
  ],
  "88": [
    "Claro, aqui tienes el return del algoritmo quicksort basico en python:\nreturn quicksort(menores) + [pivote] + quicksort(mayores)#Este return llama recursivamente a la funcion para ordenar las listas y unirlas",
    "Aqui esta el codigo del return del algoritmo quicksort basico en python:\nreturn quicksort(menores) + [pivote] + quicksort(mayores)#Este return llama recursivamente a la funcion para ordenar las listas y unirlas",
    "Aqui tienes el codigo del return del algoritmo quicksort basico en python:\nreturn quicksort(menores) + [pivote] + quicksort(mayores)#Este return llama recursivamente a la funcion para ordenar las listas y unirlas"
  ],
  "89": [
    "Aqui tienes la asignacion del pivote del algoritmo quicksort optimizado en python:\npivote = arr[len(arr) // 2]",
    "Claro, aqui esta el codigo que asigna el pivote del algoritmo optimizado basico en python:\npivote = arr[len(arr) // 2]",
    "Aqui esta la asignacion del pivote del algoritmo quicksort optimizado en python:\npivote = arr[len(arr) // 2]"
  ],
  "90": [
    "Claro, aqui tienes la division de la lista en el algoritmo quicksort optimizado en python:\nizquierda = [x for x in arr if x < pivote]#en esta lista se guardan los valores menores que el pivote\niguales = [x for x in arr if x == pivote]#en esta lista se guardan los valores iguales al pivote\nderecha = [x for x in arr if x > pivote]#en esta lista se guardan los valores que son mayores que el pivote",
    "Aqui esta el codigo que divide la lista en el algoritmo quicksort optimizado en python:\nizquierda = [x for x in arr if x < pivote]#en esta lista se guardan los valores menores que el pivote\niguales = [x for x in arr if x == pivote]#en esta lista se guardan los valores iguales al pivote\nderecha = [x for x in arr if x > pivote]#en esta lista se guardan los valores que son mayores que el pivote",
    "Aqui tienes el codigo que genera sublistas en el algoritmo quicksort optimizado en python:\nizquierda = [x for x in arr if x < pivote]#en esta lista se guardan los valores menores que el pivote\niguales = [x for x in arr if x == pivote]#en esta lista se guardan los valores iguales al pivote\nderecha = [x for x in arr if x > pivote]#en esta lista se guardan los valores que son mayores que el pivote"
  ],
  "91": [
    "Claro, aqui tienes el return del algoritmo quicksort basico en python:\nreturn quicksort(izquierda) + iguales + quicksort(derecha)#Este return llama recursivamente a la funcion para ordenar las listas y unirlas",
    "Aqui esta el codigo del return del algoritmo quicksort basico en python:\nreturn quicksort(izquierda) + iguales + quicksort(derecha)#Este return llama recursivamente a la funcion para ordenar las listas y unirlas",
    "Aqui tienes el codigo del return del algoritmo quicksort basico en python:\nreturn quicksort(izquierda) + iguales + quicksort(derecha)#Este return llama recursivamente a la funcion para ordenar las listas y unirlas"
  ],
  "92": [
    "Claro, aqui tienes el código \n```for i in range(n):\n\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n```",
    "Aqui esta el código \n```for i in range(n):\n\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n```",
    "Este es el código \n```for i in range(n):\n\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n```"
  ],
  "93": [
    "Claro, aqui tienes el código \n```for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n```",
    "Aqui esta el código \n```for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n```",
    "Este es el código \n```for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n```"
  ],
  "94": [
    "Claro, aqui tienes el código \n```if arr[j] > arr[j + 1]:\n                # Intercambia si están en el orden incorrecto\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n```",
    "Aqui esta el código \n```if arr[j] > arr[j + 1]:\n                # Intercambia si están en el orden incorrecto\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n```",
    "Este es el código \n```if arr[j] > arr[j + 1]:\n                # Intercambia si están en el orden incorrecto\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n```"
  ],
  "95": [
    "Claro, aqui tienes el código \n``` arr[j], arr[j + 1] = arr[j + 1], arr[j]\n```",
    "Aqui esta el código \n``` arr[j], arr[j + 1] = arr[j + 1], arr[j]\n```",
    "Este es el código \n``` arr[j], arr[j + 1] = arr[j + 1], arr[j]\n```"
  ],
  "96": [
    "Claro, aqui tienes el código \n```return arr\n```",
    "Aqui esta el código \n```return arr\n```",
    "Este es el código \n```return arr\n```"
  ],
  "97": [
    "Claro, aqui tienes el código \n```for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n        if (arr[j] > arr[j + 1]) {\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n        }\n    }\n}\n```",
    "Aqui esta el código \n```for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n        if (arr[j] > arr[j + 1]) {\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n        }\n    }\n}\n```",
    "Este es el código \n```for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n        if (arr[j] > arr[j + 1]) {\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n        }\n    }\n}\n```"
  ],
  "98": [
    "Claro, aqui tienes el código \n```for (let j = 0; j < n - i - 1; j++) {\n    if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n    }\n}\n```",
    "Aqui esta el código \n```for (let j = 0; j < n - i - 1; j++) {\n    if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n    }\n}\n```",
    "Este es el código \n```for (let j = 0; j < n - i - 1; j++) {\n    if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n    }\n}\n```"
  ],
  "99": [
    "Claro, aqui tienes el código \n```if (arr[j] > arr[j + 1]) {\n    [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n}\n```",
    "Aqui esta el código \n```if (arr[j] > arr[j + 1]) {\n    [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n}\n```",
    "Este es el código \n```if (arr[j] > arr[j + 1]) {\n    [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n}\n```"
  ],
  "100": [
    "Claro, aqui tienes el código \n```[arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n```",
    "Aqui esta el código \n```[arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n```",
    "Este es el código \n```[arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n```"
  ],
  "101": [
    "Claro, aqui tienes el código \n```return arr;\n```",
    "Aqui esta el código \n```return arr;\n```",
    "Este es el código \n```return arr;\n```"
  ],
  "102": [
    "Claro, aqui tienes el código \n```for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n```",
    "Aqui esta el código \n```for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n```",
    "Este es el código \n```for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n```"
  ],
  "103": [
    "Claro, aqui tienes el código \n```for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n```",
    "Aqui esta el código \n```for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n```",
    "Este es el código \n```for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n```"
  ],
  "104": [
    "Claro, aqui tienes el código \n```if arr[j] < arr[min_idx]:\n                min_idx = j\n```",
    "Aqui esta el código \n```if arr[j] < arr[min_idx]:\n                min_idx = j\n```",
    "Este es el código \n```if arr[j] < arr[min_idx]:\n                min_idx = j\n```"
  ],
  "105": [
    "Claro, aqui tienes el código \n```arr[i], arr[min_idx] = arr[min_idx], arr[i]\n```",
    "Aqui esta el código \n```arr[i], arr[min_idx] = arr[min_idx], arr[i]\n```",
    "Este es el código \n```arr[i], arr[min_idx] = arr[min_idx], arr[i]\n```"
  ],
  "106": [
    "Claro, aqui tienes el código \n```return arr\n```",
    "Aqui esta el código \n```return arr\n```",
    "Este es el código \n```return arr\n```"
  ],
  "107": [
    "Claro, aqui tienes el código \n```for (let i = 0; i < arr.length; i++) {\n    let minIdx = i;\n    for (let j = i + 1; j < arr.length; j++) {\n        if (arr[j] < arr[minIdx]) {\n            minIdx = j;\n        }\n    }\n    [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n}\n```",
    "Aqui esta el código \n```for (let i = 0; i < arr.length; i++) {\n    let minIdx = i;\n    for (let j = i + 1; j < arr.length; j++) {\n        if (arr[j] < arr[minIdx]) {\n            minIdx = j;\n        }\n    }\n    [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n}\n```",
    "Este es el código \n```for (let i = 0; i < arr.length; i++) {\n    let minIdx = i;\n    for (let j = i + 1; j < arr.length; j++) {\n        if (arr[j] < arr[minIdx]) {\n            minIdx = j;\n        }\n    }\n    [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n}\n```"
  ],
  "108": [
    "Claro, aqui tienes el código \n```for (let j = i + 1; j < arr.length; j++) {\n    if (arr[j] < arr[minIdx]) {\n        minIdx = j;\n    }\n}\n```",
    "Aqui esta el código \n```for (let j = i + 1; j < arr.length; j++) {\n    if (arr[j] < arr[minIdx]) {\n        minIdx = j;\n    }\n}\n```",
    "Este es el código \n```for (let j = i + 1; j < arr.length; j++) {\n    if (arr[j] < arr[minIdx]) {\n        minIdx = j;\n    }\n}\n```"
  ],
  "109": [
    "Claro, aqui tienes el código \n```if (arr[j] < arr[minIdx]) {\n    minIdx = j;\n}\n```",
    "Aqui esta el código \n```if (arr[j] < arr[minIdx]) {\n    minIdx = j;\n}\n```",
    "Este es el código \n```if (arr[j] < arr[minIdx]) {\n    minIdx = j;\n}\n```"
  ],
  "110": [
    "Claro, aqui tienes el código \n```[arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n```",
    "Aqui esta el código \n```[arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n```",
    "Este es el código \n```[arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n```"
  ],
  "111": [
    "Claro, aqui tienes el código \n```return arr;\n```",
    "Aqui esta el código \n```return arr;\n```",
    "Este es el código \n```return arr;\n```"
  ],
  "118":[
    "Claro, aqui tienes la funcion quicksort del algoritmo quicksort de indices explicitos en python:\ndef quicksort(arr, inicio, fin):\n\tif inicio < fin:\n\t\tpivote = particion(arr, inicio, fin)\n\t\tquicksort(arr, inicio, pivote - 1)\n\t\tquicksort(arr, pivote + 1, fin)",
    "Aqui tienes el codigo de la funcion quicksort del algoritmo quicksort de indices explicitos en python:\ndef quicksort(arr, inicio, fin):\n\tif inicio < fin:\n\t\tpivote = particion(arr, inicio, fin)\n\t\tquicksort(arr, inicio, pivote - 1)\n\t\tquicksort(arr, pivote + 1, fin)",
    "Aqui esta el codigo de la funcion quicksort del algoritmo quicksort de indices explicitos en python:\ndef quicksort(arr, inicio, fin):\n\tif inicio < fin:\n\t\tpivote = particion(arr, inicio, fin)\n\t\tquicksort(arr, inicio, pivote - 1)\n\t\tquicksort(arr, pivote + 1, fin)"
  ],
  "119":[
    "Claro, aqui tienes el codigo del if de la funcion quicksort del algoritmo quicksort de indices explicitos en python:\nif inicio < fin:\n\tpivote = particion(arr, inicio, fin)\n\tquicksort(arr, inicio, pivote - 1)\n\tquicksort(arr, pivote + 1, fin)\nEste if divide la lista en dos partes y aplica el quicksort a ambas partes",
    "Aqui esta el codigo del if de la funcion quicksort del algoritmo quicksort de indices explicitos en python:\nif inicio < fin:\n\tpivote = particion(arr, inicio, fin)\n\tquicksort(arr, inicio, pivote - 1)\n\tquicksort(arr, pivote + 1, fin)\nEste if divide la lista en dos partes y aplica el quicksort a ambas partes",
    "Aqui tienes la funcion quicksort del algoritmo quicksort de indices explicitos en python:\ndef quicksort(arr, inicio, fin):\n\tif inicio < fin:\n\t\tpivote = particion(arr, inicio, fin)\n\t\tquicksort(arr, inicio, pivote - 1)\n\t\tquicksort(arr, pivote + 1, fin)"
  ],
  "120":[
    "Claro, a continuacion tienes el codigo de la funcion particion del algoritmo quicksort de indices explicitos en python:\ndef particion(arr, inicio, fin):\n\tpivote = arr[fin]\n\ti = inicio - 1\n\tfor j in range(inicio, fin):\n\t\tif arr[j] < pivote:\n\t\t\ti += 1\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\tarr[i + 1], arr[fin] = arr[fin], arr[i + 1]\n\treturn i + 1\nEsta función organiza un subarreglo en dos partes: los elementos menores que el pivote a la izquierda y los mayores a la derecha.",
    "Aqui tienes el codigo de la funcion particion del algoritmo quicksort de indices explicitos en python:\ndef particion(arr, inicio, fin):\n\tpivote = arr[fin]\n\ti = inicio - 1\n\tfor j in range(inicio, fin):\n\t\tif arr[j] < pivote:\n\t\t\ti += 1\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\tarr[i + 1], arr[fin] = arr[fin], arr[i + 1]\n\treturn i + 1\nEsta función organiza un subarreglo en dos partes: los elementos menores que el pivote a la izquierda y los mayores a la derecha.",
    "Aqui esta el codigo de la funcion particion del algoritmo quicksort de indices explicitos en python:\ndef particion(arr, inicio, fin):\n\tpivote = arr[fin]\n\ti = inicio - 1\n\tfor j in range(inicio, fin):\n\t\tif arr[j] < pivote:\n\t\t\ti += 1\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\tarr[i + 1], arr[fin] = arr[fin], arr[i + 1]\n\treturn i + 1\nEsta función organiza un subarreglo en dos partes: los elementos menores que el pivote a la izquierda y los mayores a la derecha."
  ],
  "121":[
    "Claro, aqui tienes el codigo que define el pivote de la funcion particion del algoritmo quicksort de indices explicitos en python:\npivote = arr[fin] # Selecciona el último elemento como pivote",
    "Aqui esta el codigo que selecciona el pivote de la funcion particion del algoritmo quicksort de indices explicitos en python:\npivote = arr[fin] # Selecciona el último elemento como pivote",
    "Aqui tienes el codigo que asigna un pivote de la funcion particion del algoritmo quicksort de indices explicitos en python:\npivote = arr[fin] # Selecciona el último elemento como pivote"
  ],
  "122":[
    "Claro, aqui tienes el codigo del for de la funcion particion del algoritmo quicksort de indices explicitos en python:\nfor j in range(inicio, fin):\n\tif arr[j] < pivote:\n\t\ti += 1\n\t\tarr[i], arr[j] = arr[j], arr[i]\n\tarr[i + 1], arr[fin] = arr[fin], arr[i + 1]",
    "Aqui esta el codigo del for de la funcion particion del algoritmo quicksort de indices explicitos en python:\nfor j in range(inicio, fin):\n\tif arr[j] < pivote:\n\t\ti += 1\n\t\tarr[i], arr[j] = arr[j], arr[i]\n\tarr[i + 1], arr[fin] = arr[fin], arr[i + 1]",
    "Aqui tienes el codigo del for de la funcion particion del algoritmo quicksort de indices explicitos en python:\nfor j in range(inicio, fin):\n\tif arr[j] < pivote:\n\t\ti += 1\n\t\tarr[i], arr[j] = arr[j], arr[i]\n\tarr[i + 1], arr[fin] = arr[fin], arr[i + 1]"
  ],
  "123":[
    "Aqui tienes el codigo del if de la funcion particion del algoritmo quicksort de indices explicitos en python:\nif arr[j] < pivote:\n\ti += 1\n\tarr[i], arr[j] = arr[j], arr[i]# Intercambia el elemento con la posición i.",
    "Claro, Aqui tienes el codigo del if de la funcion particion del algoritmo quicksort de indices explicitos en python:\nif arr[j] < pivote:\n\ti += 1\n\tarr[i], arr[j] = arr[j], arr[i]# Intercambia el elemento con la posición i.",
    "Aqui esta el codigo del if de la funcion particion del algoritmo quicksort de indices explicitos en python:\nif arr[j] < pivote:\n\ti += 1\n\tarr[i], arr[j] = arr[j], arr[i]# Intercambia el elemento con la posición i."
  ],
  "124":[
    "Aqui esta el codigo que realiza el intercambio del pivote en la funcion particion del algoritmo quicksort de indices explicitos en python:\narr[i + 1], arr[fin] = arr[fin], arr[i + 1]#Coloca el pivote en su posición correcta",
    "Claro, Aqui esta el codigo que realiza el intercambio del pivote en la funcion particion del algoritmo quicksort de indices explicitos en python:\narr[i + 1], arr[fin] = arr[fin], arr[i + 1]#Coloca el pivote en su posición correcta",
    "La siguiente linea realiza el intercambio del pivote en la funcion particion del algoritmo quicksort de indices explicitos en python:\narr[i + 1], arr[fin] = arr[fin], arr[i + 1]#Coloca el pivote en su posición correcta"
  ],
  "125":[
    "Claro, Aqui tienes la definicion de la clase nodo para un arbol binario en python:\nclass Nodo:\n\tdef __init__(self, valor):\n\t\tself.valor = valor\n\t\tself.izquierda = None\n\t\tself.derecha = None",
    "Aqui esta la clase nodo para un arbol binario en python:\n\tdef __init__(self, valor):\n\t\tself.valor = valor\n\t\tself.izquierda = None\n\t\tself.derecha = None",
    "A continuacion te muestro la clase nodo para un arbol binario en python:\n\tdef __init__(self, valor):\n\t\tself.valor = valor\n\t\tself.izquierda = None\n\t\tself.derecha = None"
  ],
  
  "126":[
    "A continuacion te muestro el constructor de la clase nodo para un arbol binario en python:\ndef __init__(self, valor):\n\tself.valor = valor\n\tself.izquierda = None\n\tself.derecha = None",
    "Claro, aqui tienes el constructor de la clase nodo del algoritmo de arboles en python:\ndef __init__(self, valor):\n\tself.valor = valor\n\tself.izquierda = None\n\tself.derecha = None",
    "El siguiente codigo define el constructor de la clase nodo del algoritmo de arboles en python:\ndef __init__(self, valor):\n\tself.valor = valor\n\tself.izquierda = None\n\tself.derecha = None"
  ],
  "127":[
    "Claro, aqui tienes el metodo inorden del algoritmo de arboles en python:\ndef inorden(nodo):\n\tif nodo:\n\t\tinorden(nodo.izquierda)\n\t\tprint(nodo.valor)\n\t\tinorden(nodo.derecha)",
    "El siguiente codigo implementa el metodo inorden del algoritmo de arboles en python:\ndef inorden(nodo):\n\tif nodo:\n\t\tinorden(nodo.izquierda)\n\t\tprint(nodo.valor)\n\t\tinorden(nodo.derecha)",
    "Aqui esta el metodo inorden del algoritmo de arboles en python:\ndef inorden(nodo):\n\tif nodo:\n\t\tinorden(nodo.izquierda)\n\t\tprint(nodo.valor)\n\t\tinorden(nodo.derecha)"
  ]
}